// Reversed by pbd (https://github.com/rsc-dev/pbd)
syntax = "proto2";

import "types.proto";

// Package not defined

message PbVolumeTarget {
	required .PbVolumeTarget.PbVolymeTargetType target_type = 1 ;
	optional .PbDuration duration = 2 ;
	optional float distance = 3 ;
	optional uint32 calories = 4 ;
	
	enum PbVolymeTargetType {
		VOLUME_TARGET_TYPE_DURATION = 0;
		VOLUME_TARGET_TYPE_DISTANCE = 1;
		VOLUME_TARGET_TYPE_CALORIES = 2;
	}
}

message PbStravaSegmentTargets {
	optional .PbDuration own_best = 1 ;
	optional .PbDuration kom_qom = 2 ;
}

message PbStravaSegmentTarget {
	required .PbStravaSegmentTarget.PbStravaSegmentType strava_segment_type = 1 ;
	optional .PbStravaSegmentTargets strava_segment_targets = 2 ;
	
	enum PbStravaSegmentType {
		STRAVA_SEGMENT_TYPE_RIDE = 1;
		STRAVA_SEGMENT_TYPE_RUN = 2;
	}
}

message PbTrainingLoad {
	optional uint32 training_load_val = 1 ;
	optional .PbDuration recovery_time = 2 ;
	optional uint32 carbohydrate_consumption = 3 ;
	optional uint32 protein_consumption = 4 ;
	optional uint32 fat_consumption = 5 ;
	optional float carbohydrate_grams = 6 ;
	optional float protein_grams = 7 ;
	optional float fat_grams = 8 ;
	optional float meal_size = 9 ;
	repeated .PbDuration fueling_reminder_timestamps = 10 ;
}

message PbHeartRateZone {
	required uint32 lower_limit = 1 ;
	required uint32 higher_limit = 2 ;
}

message PbSpeedZone {
	required float lower_limit = 1 ;
	required float higher_limit = 2 ;
}

message PbPowerZone {
	required uint32 lower_limit = 1 ;
	required uint32 higher_limit = 2 ;
}

message PbZones {
	repeated .PbHeartRateZone heart_rate_zone = 1 ;
	repeated .PbSpeedZone speed_zone = 2 ;
	repeated .PbPowerZone power_zone = 3 ;
	optional .PbHeartRateZoneSettingSource heart_rate_setting_source = 10 ;
	optional .PbPowerZoneSettingSource power_setting_source = 11 ;
	optional .PbSpeedZoneSettingSource speed_setting_source = 12 ;
}

message PbBleMac {
	required bytes mac = 1 ;
	required .PbMacType type = 2 ;
}

message PbBleDeviceName {
	required string name = 1 ;
}

message PbDeviceId {
	required string device_id = 1 ;
}

message PbRunningIndex {
	required uint32 value = 1 ;
	optional .PbDuration calculation_time = 2 ;
}

message PbSportIdentifier {
	required uint64 value = 1 ;
}

message PbOneLineText {
	required string text = 1 ;
}

message PbMultiLineText {
	required string text = 1 ;
}

message PbLanguageId {
	required string language = 1 ;
}

message PbTrainingSessionTargetId {
	required uint64 value = 1 ;
	optional .PbSystemDateTime last_modified = 2 ;
}

message PbTrainingSessionFavoriteId {
	required uint64 value = 1 ;
	optional .PbSystemDateTime last_modified = 2 ;
}

message PbRouteId {
	required uint64 value = 1 ;
}

message PbSwimmingPoolInfo {
	optional float pool_length = 1 ;
	required .PbSwimmingPoolUnits swimming_pool_type = 2 ;
}

message PbTrainingProgramId {
	required uint64 value = 1 ;
}

message PbEventId {
	required uint64 value = 1 ;
}

message PbOnDemandTrainingTargetTypeId {
	required uint64 value = 1 ;
}

message PbPauseTime {
	required .PbDuration start_time = 1 ;
	required .PbDuration duration = 2 ;
}

message PbApplicationId {
	required uint64 value = 1 ;
}

message PbVersion {
	required uint32 major = 1 ;
	required uint32 minor = 2 ;
	required uint32 patch = 3 ;
	optional string specifier = 4 ;
}

message PbAlgorithmVersion {
	optional .PbVersion ohr_version = 1 ;
}

message PbSubcomponentInfo {
	required string name = 1 ;
	optional .PbVersion OBSOLETE_required_version = 2 ;
	optional .PbVersion version = 3 ;
}

message PbBleUuid {
	required bytes uuid = 1 ;
}

message PbBleCharacteristic {
	required uint32 handle = 1 ;
	required .PbBleUuid type = 2 ;
}

message PbBleService {
	required .PbBleUuid serviceUuid = 1 ;
	repeated .PbBleCharacteristic characteristics = 2 ;
}

message PbSourceDevice {
	required string name = 1 ;
	optional string manufacturer = 2 ;
	optional string model_number = 3 ;
	optional string hardware_code = 4 ;
	optional .PbVersion platform_version = 5 ;
	optional .PbVersion software_version = 6 ;
	optional .PbVersion polarmathsmart_version = 7 ;
	optional .PbSourceDevice collector = 8 ;
}

message PbSampleSourceDevice {
	required uint32 start_index = 1 ;
	required .PbSourceDevice source_device = 2 ;
}

message PbStrengthTrainingResistance {
	required .PbStrengthTrainingResistance.PbStrengthTrainingResistanceType resistance_type = 1 ;
	optional float weight = 2 ;
	
	enum PbStrengthTrainingResistanceType {
		BODY_WEIGHT = 0;
		WEIGHT = 1;
	}
}
